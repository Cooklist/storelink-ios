// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios16.4-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Storelink
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Foundation
import React
@_exported import Storelink
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum ViewType {
  case backgroundTask
  case storeConnectionsList
  case connectUpdateStore
  case transferCart
  case deviceUuid
  public static func == (a: Storelink.ViewType, b: Storelink.ViewType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum LogLevel {
  case none
  case debug
  case dev
  public static func == (a: Storelink.LogLevel, b: Storelink.LogLevel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class StorelinkViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func loadView()
}
@_hasMissingDesignatedInitializers public class StorelinkCore {
  public struct Configuration {
    public init(refreshToken: Swift.String, logLevel: Storelink.LogLevel? = nil, onConfigurationSuccess: (([Swift.AnyHashable : Any]) -> Swift.Void)? = nil, onStoreConnectionEvent: (([Swift.AnyHashable : Any]) -> Swift.Void)? = nil, onInvoiceEvent: (([Swift.AnyHashable : Any]) -> Swift.Void)? = nil, onCheckingStoreConnectionEvent: (([Swift.AnyHashable : Any]) -> Swift.Void)? = nil, brandName: Swift.String? = nil, logoUrl: Swift.String? = nil)
  }
  public enum SDKError : Swift.Error {
    case invalidRefreshToken
    case unknownError
    case nativeCommunicationError
    public static func == (a: Storelink.StorelinkCore.SDKError, b: Storelink.StorelinkCore.SDKError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum PresentationMethod {
    case presentModally(on: UIKit.UIViewController)
    case pushOnNavigationStack(navigationController: UIKit.UINavigationController)
    case embedInTab(tabBarController: UIKit.UITabBarController, at: Swift.Int?)
  }
  public class SDKHandler {
    public init(config: Storelink.StorelinkCore.Configuration)
    @objc deinit
    @objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SDKViewController : Storelink.StorelinkViewController {
      @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
      @objc deinit
    }
    public func getBackgroundView() -> Storelink.StorelinkCoreView
    public func getConnectUpdateStoreView(storeId: Swift.String, onComplete: (([Swift.AnyHashable : Any]) -> Swift.Void)? = nil) -> Storelink.StorelinkCoreView
    public func getTransferCartView(cartId: Swift.String, onComplete: (([Swift.AnyHashable : Any]) -> Swift.Void)? = nil) -> Storelink.StorelinkCoreView
    public func sendDataToReactNative(data: [Swift.AnyHashable : Any])
  }
  #if compiler(>=5.3) && $AsyncAwait
  public static func create(_ config: Storelink.StorelinkCore.Configuration) async -> Swift.Result<Storelink.StorelinkCore.SDKHandler, Storelink.StorelinkCore.SDKError>
  #endif
  @objc deinit
}
public struct StorelinkCoreView : SwiftUI.UIViewControllerRepresentable {
  public init(refreshToken: Swift.String, logLevel: Storelink.LogLevel? = nil, viewType: Storelink.ViewType = .backgroundTask, functionParams: [Swift.AnyHashable : Any]? = nil, onComplete: (([Swift.AnyHashable : Any]) -> Swift.Void)? = nil, brandName: Swift.String? = nil, logoUrl: Swift.String? = nil)
  public typealias UIViewControllerType = UIKit.UINavigationController
  @_Concurrency.MainActor(unsafe) public func makeUIViewController(context: Storelink.StorelinkCoreView.Context) -> UIKit.UINavigationController
  @_Concurrency.MainActor(unsafe) public func updateUIViewController(_ uiViewController: UIKit.UINavigationController, context: Storelink.StorelinkCoreView.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
}
extension Storelink.ViewType : Swift.Equatable {}
extension Storelink.ViewType : Swift.Hashable {}
extension Storelink.LogLevel : Swift.Equatable {}
extension Storelink.LogLevel : Swift.Hashable {}
extension Storelink.StorelinkCore.SDKError : Swift.Equatable {}
extension Storelink.StorelinkCore.SDKError : Swift.Hashable {}
